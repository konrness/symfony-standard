<?xml version="1.0" encoding="UTF-8"?>
<!--
    Symfony2 build.xml template

    This file is a template build file for Symfony2 projects. It defines all the
    processes needed to clean and build a project and will walk developers
    through the setup process.

    NOTES:
    * This script will prompt the user for an application environment and base
    upon install. To do this automatically you may specify these in your
    build.properties file as `project.application-environment`
    * You can generate Docblox documentation by setting the parameter
      `project.use-docblox` in your build.properties to `true`
-->
<project name="Symfony2 Build Template" basedir="." default="main">
    <!-- Properties -->
    <if>
        <available file="build.properties"/>
        <then>
            <property file="build.properties"/>
        </then>
        <else>
            <echo msg="No build.properties file detected... OK. Skipping" level="verbose" />
        </else>
    </if>
    <property name="dir.app" value="${project.basedir}/app"/>
    <property name="dir.src" value="${project.basedir}/src"/>
    <property name="dir.cache" value="${dir.app}/cache"/>
    <property name="dir.logs" value="${dir.app}/logs"/>
    <property name="dir.web" value="${project.basedir}/web"/>
    <property name="dir.vendor" value="${project.basedir}/vendor"/>
    <property name="dir.build" value="${project.basedir}/build"/>
    <property name="dir.output" value="${dir.build}/output"/>
    <property name="dir.docs" value="${dir.build}/docs"/>
    <property name="dir.docs.phpdoc" value="${dir.docs}/phpdoc"/>
    <property name="dir.docs.docblox" value="${dir.docs}/docblox"/>
    <property name="dir.reports" value="${dir.build}/logs"/>
    <property name="dir.reports.pdepend" value="${dir.reports}/pdepend"/>
    <property name="dir.reports.coverage" value="${dir.reports}/coverage"/>
    <property name="bin.composer" value="${project.basedir}/composer.phar"/>
    <property name="bin.composer.failMessage" value="Could not find composer. Please make a composer.phar executable available either in path or project root. See: http://getcomposer.org/download/ for details."/>

    <!-- Filesets -->
    <fileset id="sourcecode" dir="${dir.src}">
        <include name="**/*.php"/>
    </fileset>

    <!-- Default target -->
    <target name="main">
        <echo msg="See:"/>
        <echo msg=" * phing -l"/>
    </target>

    <!--
        Reinstall Target

        This target simply does a clean install of the project
    -->
    <target name="reinstall"
            description="Clean Install the project"
            depends="clean, install" />

    <!--
        Install target

        This Target defines the process for the Install command. It sets up the
        minimum needed for the application to run properly.
    -->
    <target name="install"
            depends="
                clean:cache:clear,
                build:prepare,
                build:configs,
                build:dependencies:install,
                build:permissions,
                symfony:assets:install,
                symfony:cache:warmup
            "
            description="Install Project">
    </target>

    <!--
        Release target

        This target defines the process for the Release command. It does a full
        clean and install of the application and then packages it.
    -->
    <target name="release"
            depends="
                build:clean,
                build:prepare,
                build:check,
                build:configs,
                build:doc,
                build:dependencies:install,
                build:dependencies:cache,
                build:permissions,
                test:unit,
                symfony:release:assets:install,
                symfony:release:router:dump,
                build:package
            "
            description="Run all test and build everything"/>

    <!--
        Check Target

        This target dumps any relevant debug information out
    -->
    <target name="check" description="Check environment and debug info">
        <echo msg="Checking PHP configuration" level="info" />
        <exec command="php ${dir.app}/check.php" passthru="true" />
    </target>

    <!--
        Test target

        This target defines a process for running unit tests
    -->
    <target name="test"
            description="Run application tests"
            depends="test:unit"/>

    <!--
        Clean Target

        This target defines the process for cleaning the build
    -->
    <target name="clean"
            description="Clean up build files"
            depends="build:clean" />

    <!-- SUBTARGETS -->

    <!-- Build Configs -->
    <target name="build:configs">
        <phingcall target="build:phpunit:config" />
        <phingcall target="build:htaccess" />
    </target>

    <!-- Dependency / Composer install -->
    <target name="build:dependencies:install"
            depends="detect-composerbin">
        <exec passthru="true" checkreturn="true" command="${bin.composer} install" />
    </target>

    <!-- Dependency Cache / Composer dump-autoload -->
    <target name="build:dependencies:cache"
            depends="detect-composerbin">
        <exec passthru="true" checkreturn="true" command="${bin.composer} dump-autoload --optimize" />
    </target>

    <!-- Create .htaccess files -->
    <target name="build:htaccess">

        <if>
            <isset property="project.application-environment"/>
            <then>
                <phingcall target="build:htaccess:from-params" />
            </then>
            <else>
                <phingcall target="build:htaccess:from-prompt" />
            </else>
        </if>

    </target>

    <!-- Htaccess file from user prompt -->
    <target name="build:htaccess:from-prompt">
        <input propertyName="project.application-environment"
               defaultValue="prod" promptChar="?">Application environment
        </input>

        <copy file="${dir.web}/.htaccess.dist" tofile="${dir.web}/.htaccess"
              overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="PLACEHOLDER_APPLICATION_ENV"
                           value="${project.application-environment}"/>
                </replacetokens>
            </filterchain>
        </copy>
    </target>

    <!-- Htaccess file from a preset parameter -->
    <target name="build:htaccess:from-params">
        <copy file="${dir.web}/.htaccess.dist" tofile="${dir.web}/.htaccess"
              overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="PLACEHOLDER_APPLICATION_ENV"
                           value="${project.application-environment}"/>
                </replacetokens>
            </filterchain>
        </copy>
    </target>

    <!-- Build Permissions -->
    <target name="build:permissions">
        <chmod mode="0777" verbose="true">
            <fileset dir="${dir.logs}">
                <include name="**/**"/>
            </fileset>
        </chmod>
        <chmod mode="0777" verbose="true">
            <fileset dir="${dir.cache}">
                <include name="**/**"/>
            </fileset>
        </chmod>
    </target>

    <!-- Package Build -->
    <target name="build:package">
        <!-- Build Tar file -->
        <tar basedir="${project.basedir}" destfile="build/release.tar.gz" compression="gzip" includeemptydirs="true">
            <fileset dir=".">
                <exclude name="web/config.php" />
                <exclude name="web/app_dev.php" />
                <exclude name=".git" />
                <exclude name="build/" />
            </fileset>
        </tar>
    </target>

    <!-- Copy dist phpunit xml -->
    <target name="build:phpunit:config">
        <copy file="${dir.app}/phpunit.xml.dist" tofile="${dir.app}/phpunit.xml"
              overwrite="false"/>
    </target>

    <!-- Doc target -->
    <target name="build:doc"
            depends="build:prepare, doc:phpdoc, doc:phploc">
        <if>
            <and>
                <isset property="project.use-docblox"/>
                <equals arg1="${project.use-docbox}" arg2="true" />
            </and>
            <then>
                <phingcall target="doc:docblox" />
            </then>
        </if>

    </target>

    <!-- phploc -->
    <target name="doc:phploc">
        <exec executable="phploc">
            <arg value="--log-csv" />
            <arg value="${dir.reports}/phploc.csv" />
            <arg path="${project.basedir}/src" />
        </exec>
    </target>

    <!-- Check target -->
    <target name="build:check"
            depends="check:cs, check:md, check:cpd, check:depend"/>

    <!-- Project build clean -->
    <target name="build:clean" description="Clean up generated files">
        <echo msg="Cleaning build directories ..."/>
        <delete dir="${dir.build}" verbose="true"/>
        <delete dir="${dir.vendor}" verbose="false"/>
        <exec checkreturn="true" command="rm -rf ${dir.cache}" />
        <delete dir="${dir.logs}" verbose="true"/>
        <delete file="${dir.web}/.htaccess" verbose="true"/>
        <delete dir="${dir.web}/bundles" verbose="true"/>
        <delete file="${project.basedir}/composer.lock" />
    </target>

    <!-- Project build prepare -->
    <target name="build:prepare">
        <echo msg="Creating build directories ..."/>
        <mkdir dir="${dir.cache}"/>
        <mkdir dir="${dir.logs}"/>
        <mkdir dir="${dir.build}"/>
        <mkdir dir="${dir.output}" />
        <mkdir dir="${dir.docs}"/>
        <mkdir dir="${dir.docs.phpdoc}"/>
        <mkdir dir="${dir.docs.docblox}"/>
        <mkdir dir="${dir.reports}"/>
        <mkdir dir="${dir.reports.coverage}"/>
        <mkdir dir="${dir.reports.pdepend}"/>
    </target>

    <!-- Symfony install assets -->
    <target name="symfony:assets:install">
        <exec passthru="true" checkreturn="true" command="${dir.app}/console assets:install web --symlink --env=dev" />
    </target>

    <!-- Symfony install release assets -->
    <target name="symfony:release:assets:install">
        <exec passthru="true" checkreturn="true" command="${dir.app}/console assets:install web --env=prod" />
        <exec passthru="true" checkreturn="true" command="${dir.app}/console assetic:dump --env=prod" />
    </target>

    <!-- Symfony warmup cache -->
    <target name="symfony:cache:warmup">
        <exec passthru="true" checkreturn="true" command="${dir.app}/console cache:clear --env=dev" />
        <exec passthru="true" checkreturn="true" command="${dir.app}/console cache:warmup --env=dev" />
    </target>

    <!-- Syfmony warmup release cache -->
    <target name="symfony:release:cache:warmup">
        <exec passthru="true" checkreturn="true" command="${dir.app}/console cache:clear --env=prod" />
        <echo msg="Cache cleared, but NOT warmed up for release mode" level="info" />
    </target>

    <!-- Syfmony warmup release cache -->
    <target name="clean:cache:clear">
        <exec checkreturn="true" command="rm -rf ${dir.cache}" />
        <delete dir="${dir.logs}" verbose="true"/>
    </target>

    <!-- Symfony dump router config -->
    <target name="symfony:release:router:dump">
        <exec passthru="true" checkreturn="true" command="${dir.app}/console router:dump-apache --env=prod >> ${dir.web}/.htaccess" />
    </target>

    <!-- PHPDOC API documentation target -->
    <target name="doc:phpdoc">
        <echo msg="Generating API documentation with PHPDoc..."/>
        <exec passthru="true" checkreturn="true" command='phpdoc -d ./src --defaultpackagename="${phing.project.name}" --title="${phing.project.name} :: API Documentation" --target="${dir.docs.phpdoc}" --sourcecode -c phpdoc.xml' />
    </target>

    <!-- DocBlox API documentation target -->
    <target name="doc:docblox">
        <echo msg="Generating API Documentation with DocBlox ..."/>
        <docblox title="${phing.project.name} :: API Documentation"
                 destdir="${dir.docs.docblox}"
                 quiet="false">
            <fileset refid="sourcecode"/>
        </docblox>
    </target>

    <!-- PSR2 code sniffer -->
    <target name="check:cs">
        <echo msg="Checking coding standard ..."/>
        <phpcodesniffer standard="PSR2"
                        showSniffs="true"
                        showWarnings="true">
            <fileset refid="sourcecode"/>
            <formatter type="checkstyle"
                       outfile="${dir.reports}/checkstyle.xml"/>
        </phpcodesniffer>
    </target>

    <!-- copy/paste detector -->
    <target name="check:cpd">
        <echo msg="Checking similar code blocks ..."/>
        <phpcpd>
            <fileset refid="sourcecode"/>
            <formatter type="pmd" outfile="${dir.reports}/pmd-cpd.xml"/>
        </phpcpd>
    </target>

    <!-- Mess detector -->
    <target name="check:md">
        <echo msg="Generating code metrics ..."/>
        <phpmd rulesets="codesize,unusedcode">
            <fileset refid="sourcecode"/>
            <formatter type="xml" outfile="${dir.reports}/pmd.xml"/>
        </phpmd>
    </target>

    <!-- Code dependency -->
    <target name="check:depend">
        <echo msg="Checking coupling and dependency ..."/>
        <phpdepend file="${dir.src}">
            <logger type="jdepend-xml"
                    outfile="${dir.reports.pdepend}/jdepend.xml"/>
            <logger type="jdepend-chart"
                    outfile="${dir.reports.pdepend}/dependencies.svg"/>
            <logger type="overview-pyramid"
                    outfile="${dir.reports.pdepend}/overview-pyramid.svg"/>
        </phpdepend>
    </target>

    <!-- Unit tests -->
    <target name="test:unit">
        <echo msg="Running unit tests ..."/>
        <exec passthru="true" checkreturn="true"
              command="phpunit --log-junit ${dir.reports}/phpunit.xml --coverage-clover ${dir.reports.coverage}/clover.xml --coverage-html ${dir.reports.coverage}/ -c ${dir.app}/phpunit.xml"/>
    </target>

    <!-- Internal target to get the correct composer bin file to use 
         First try composer.phar in the project directory
         Then try 'composer.phar' or 'composer' in the path, using `which`
         -->
    <target name="detect-composerbin" hidden="true">
        <if>
            <available file="${bin.composer}"/>
            <else>
                <exec command="which composer.phar" outputProperty="bin.composer"/>
                <if>
                    <equals arg1="${bin.composer}" arg2=""/>
                    <then>
                        <exec command="which composer" outputProperty="bin.composer"/>
                        <if>
                            <equals arg1="${bin.composer}" arg2=""/>
                            <then>
                                <fail message="${bin.composer.failMessage}"/>
                            </then>
                        </if>
                    </then>
                </if>
            </else>
        </if>
        <echo msg="Using composer at '${bin.composer}'"/>
    </target>
</project>
